@startuml 

'https://plantuml.com/class-diagram

class MainWindow {
    - Ui::MainWindow * ui
    - GeometricProbabilityModel * graphModel

    + MainWindow(QWidget * parent = nullptr)
    + ~MainWindow()

    - void calculateProbability()
    - void calculateWaitingTime(double probability)
    - void changeAmountOfPersons(int newAmount)
    - void showReference()
    - void showAboutProgram()
}
QMainWindow <|-- MainWindow
hide QMainWindow members



class GeometricProbabilityModel {
    - shared_ptr<IGraph> graph

    + GeometricProbabilityModel()
    + ~GeometricProbabilityModel()

    + double CalculateProbability(QTime timeDelta, QTime waitingInterval)
    + QTime CalculateWaitingQTime(QTime deltaQTime, double probability)

    + void UpdateGraph(QTime timeDelta, QTime waitingInterval)
}
MainWindow "1" *-- "1" GeometricProbabilityModel
note left of GeometricProbabilityModel::"graph"
    на этом месте будет стоять либо двухмерный,
    либо трехмерный график
end note
note right of GeometricProbabilityModel
    GeometricProbabilityModel(const GeometricProbabilityModel &) = delete
    GeometricProbabilityModel(GeometricProbabilityModel &&) = delete
    GeometricProbabilityModel & operator= (const GeometricProbabilityModel &) = delete
    GeometricProbabilityModel & operator= (GeometricProbabilityModel &&) = delete
end note



interface IGraph {
    + virtual void AddItem(shared_ptr<IGeometric> item) = 0
    + virtual void RemoveItem(shared_ptr<IGeometric> item) = 0
    + virtual ~IGraph() = 0
}
GeometricProbabilityModel "1" *--- "1" IGraph
note left of IGraph::"mainFigure"
    основная фигура, характеризующая
    геометрическую вероятность
end note
note left of IGraph::"boundingFigure"
    фигура, ограничивающая основную
end note



class Graph2d {
    - Axis xAxis
    - Axis yAxis
    - vector< shared_ptr<IGeometric> > items

    - void addAxes()

    + Graph2d()
    + virtual ~Graph2d()
}
IGraph <|-- Graph2d : public
IGeometric <|--- Graph2d : public
IDrawable <|--- Graph2d : public
note right of Graph2d
    Graph2d(const Graph2D &) = delete
    Graph2d(Graph2D &&) = delete
    Graph2d & operator=(const Graph2D &) = delete
    Graph2d & operator=(Graph2D &&) = delete
end note



class Graph3d #white { /' #white окрашивает объект в белый цвет '/
    + bla bla bla
    + bla bla bla ()
}
IGraph <|-- Graph3d : bla bla bla
note right of Graph3d
    bla bla bla
end note



class Axis {
    - QGraphicsLineItem * line
    - QGraphicsLineItem * arrowFirstPart
    - QGraphicsLineItem * arrowSecondPart
    - vector<SegmentPoint> segmentPoints

    + Axis(QPointF from, QPointF to)
    + virtual ~Axis()
}
IGeometric <|-- Axis : public
IDrawable <|-- Axis : public
Graph2d "1" *-- "2" Axis
note right of Axis
    Axis(const Axis &) = delete
    Axis(Axis &&) = delete
    Axis() = delete
    Axis & operator=(const Axis &) = delete
    Axis & operator=(Axis &&) = delete
end note



class SegmentPoint {
    - QGraphicsLineItem * line
    - QGraphicsTextItem * label

    + SegmentPoint(string label, QPointF pos, double angle)
    + virtual ~SegmentPoint()
}
IDrawable <|-- SegmentPoint : public
IGeometric <|-- SegmentPoint : public
Axis "1" *-- "*" SegmentPoint
note left of SegmentPoint::"SegmentPoint(string label, QPointF pos, double angle)"
    Деление представлено небольшой черточкой,
    расположенной под 90 градусов к оси координат.
    Параметр angle указывает, на какой угол повернута
    черточка относительно вертикальной оси графической сцены
end note
note right of SegmentPoint
    SegmentPoint(const SegmentPoint &) = delete
    SegmentPoint(SegmentPoint &&) = delete
    SegmentPoint() = delete
    SegmentPoint & operator=(const SegmentPoint &) = delete
    SegmentPoint & operator=(SegmentPoint &&) = delete
end note



interface IGeometric {
    + virtual void Translate(double dx, double dy) = 0
    + virtual void Rotate(double angle) = 0
    + virtual void Expand(double coefficient) = 0
    + virtual void Shrink(double coefficient) = 0
    + virtual ~IGeometric() = 0
}
Graph2d "1" *-- "*" IGeometric


class Polygon {
    - QGraphicsPolygonItem * polygon

    + Polygon(const QVector<QPointF> & points)
    + virtual ~Polygon()
}
IGeometric <|-- Polygon : public
IDrawable <|-left- Polygon : public
note right of Polygon
    Polygon(const Polygon &) = delete
    Polygon(Polygon &&) = delete
    Polygon() = delete
    Polygon & operator=(const Polygon &) = delete
    Polygon & operator=(Polygon &&) = delete
end note



class Polyhedron #white { /' #white окрашивает объект в белый цвет '/
    + ну да
    + тут ты снова сам все будешь делать ()
}
IGeometric <|--- Polyhedron : и тут тоже



interface IDrawable {
    + virtual void Draw(QGraphicsScene * scene) = 0
    + virtual ~IDrawable() = 0
}


@enduml