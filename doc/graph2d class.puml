@startuml 

'https://plantuml.com/class-diagram

class MainWindow {
    - Ui::MainWindow * ui
    - shared_ptr<GeometricProbabilityModel> graphModel

    + MainWindow(QWidget * parent = nullptr)
    + ~MainWindow()

    - void calculateProbability()
    - void calculateWaitingTime()
    - void changeAmountOfPersons(int newAmount)
    - void showReference()
    - void showAboutProgram()
}
QMainWindow <|-- MainWindow
hide QMainWindow members



class GeometricProbabilityModel {
    - shared_ptr<IGraph> graph

    + GeometricProbabilityModel()
    + ~GeometricProbabilityModel()

    + double CalculateProbability(const QTime & timeDelta, int waitingInterval)
    + int CalculateWaitingTime(const QTime & deltaTime, double probability)

    + void UpdateGraph(QTime timeDelta, QTime waitingInterval)
}
MainWindow "1" *-- "1" GeometricProbabilityModel
note left of GeometricProbabilityModel::"graph"
    на этом месте будет стоять либо двухмерный,
    либо трехмерный график
end note
note right of GeometricProbabilityModel
    GeometricProbabilityModel(const GeometricProbabilityModel &) = delete
    GeometricProbabilityModel(GeometricProbabilityModel &&) = delete
    GeometricProbabilityModel & operator= (const GeometricProbabilityModel &) = delete
    GeometricProbabilityModel & operator= (GeometricProbabilityModel &&) = delete
end note



interface IGraph {
    + virtual void Update(const QTime & timeDelta, const QTime & waitingInterval) = 0
    + virtual ~IGraph()
}
IRenderable <|-- IGraph : public
GeometricProbabilityModel "1" *-- "1" IGraph
note left of IGraph::"mainFigure"
    основная фигура, характеризующая
    геометрическую вероятность
end note
note left of IGraph::"boundingFigure"
    фигура, ограничивающая основную
end note



class Graph2d {
    - shared_ptr<Axis> xAxis
    - shared_ptr<Axis> yAxis
    - vector< shared_ptr<IRenderable> > items

    - void addAxes()

    + Graph2d(const QTime & timeDelta, const QTime & waitingInterval)
    + virtual ~Graph2d()
}
IGraph <|-- Graph2d : public
note right of Graph2d
    Graph2d(const Graph2D &) = delete
    Graph2d(Graph2D &&) = delete
    Graph2d() = delete
    Graph2d & operator=(const Graph2D &) = delete
    Graph2d & operator=(Graph2D &&) = delete
end note



class Graph3d #white { /' #white окрашивает объект в белый цвет '/
    + bla bla bla
    + bla bla bla ()
}
IGraph <|-- Graph3d



class Axis {
    - shared_ptr<Line> line
    - shared_ptr<Line> arrowFirstPart
    - shared_ptr<Line> arrowSecondPart
    - vector< shared_ptr<SegmentPoint> > segmentPoints
    - uint32_t segmentPointsDistance

    - void addSegmentPoints(const vector<string> & segmentPointLabels)

    + Axis(QVector3D from, QVector3D to, const vector<string> & segmentPointsLabels)
    + ~Axis()
    + void SetSegmentPointsDistance(uint32_t distance)
}
IRenderable <|-- Axis : public
Graph2d "1" *-- "2" Axis
note right of Axis
    Axis(const Axis &) = delete
    Axis(Axis &&) = delete
    Axis() = delete
    Axis & operator=(const Axis &) = delete
    Axis & operator=(Axis &&) = delete
end note



class SegmentPoint {
    - shared_ptr<Line> line
    - shared_ptr<Qt3DExtras::QText2DEntity> label

    + SegmentPoint(const string & label, const QVector3D & pos)
    + virtual ~SegmentPoint()
}
IRenderable <|-- SegmentPoint : public
Axis "1" *-- "2" SegmentPoint
note right of SegmentPoint
    SegmentPoint(const SegmentPoint &) = delete
    SegmentPoint(SegmentPoint &&) = delete
    SegmentPoint() = delete
    SegmentPoint & operator=(const SegmentPoint &) = delete
    SegmentPoint & operator=(SegmentPoint &&) = delete
end note



class Polygon {
    - vector<QVector3D> polygon

    + Polygon(const vector<QVector3D> & vertices)
    + virtual ~Polygon()
}
IRenderable <|-- Polygon : public
note right of Polygon
    Polygon(const Polygon &) = delete
    Polygon(Polygon &&) = delete
    Polygon() = delete
    Polygon & operator=(const Polygon &) = delete
    Polygon & operator=(Polygon &&) = delete
end note



class Polyhedron #white { /' #white окрашивает объект в белый цвет '/
    + ну да
    + тут ты снова сам все будешь делать ()
}
IRenderable <|- Polyhedron



interface IRenderable {
    + virtual void Render(Qt3DCore::QNode * scene) = 0
    + virtual void Remove(Qt3DCore::QNode * scene) = 0
    + virtual ~IRenderable()
}
IGraph -[hidden]- IRenderable
Graph2d "1" *-- "*" IRenderable


class Line {
    - QVector3D from
    - QVector3D to

    + Line(const QVector3D & from, const QVector3D & to)
    + ~Line()
}
IRenderable <|-- Line : public
SegmentPoint "1" *-- "1" Line
Axis "1" *-- "3" Line
note right of Line
    Line(const Line &) = delete
    Line(Line &&) = delete
    Line() = delete
    Line & operator=(const Line &) = delete
    Line & operator=(Line &&) = delete
end note

@enduml